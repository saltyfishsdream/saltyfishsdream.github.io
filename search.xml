<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python-OpenCV3学习笔记（一）]]></title>
    <url>%2F2018%2F07%2F29%2F1%2F</url>
    <content type="text"><![CDATA[最近一本关于python2实现OpenCV3的书，故开一个读书笔记的目录来督促自己学习。说实话，这本书讲得还是比较浅显的，但是对于我来说作为了解和入门已经很不错了，在文章中提到的一系列算法例如canny边缘检测、高斯混合模型等具体的算法问题等以后有时间了再仔细研究（flag已立）好了，废话不多说，直接进入正题这次的笔记是关于书的第二章，在这一章里主要讲了利用OpenCV3-python2来实现对图片和视频的一些基本操作 ##读写图像文件OpenCV对图像的读写主要是靠一下两个方法来实现的1234import cv2cv2.imread()cv2.imwrite() 无论是哪种图像的格式，每个像素都会有一个值，例如，可以通过二维Numpy来简单创建一个黑色的正方形图像：1img = numpy.zeros((3,3),dtype=numpy.uint8) #3x3 如果再控制台打印这张图像，可以得到如下结果：123array([[0, 0, 0], [0, 0, 0], [0, 0, 0]], dtype=uint8) 每一个像素点都是0的黑色但是这里是采用的灰度图的形式，也就是所，每个像素点的值表示的是颜色的灰度也就是深浅，0是黑色，而255则是白色（之所以是255是因为每个像素点是8位整数来表示）在不同格式中像素的表示方式有所不同例如，我们将上述的那个3x3的图像转换为BGR的格式1img = cv2.cvtColor(img,cv2.COLOR_GRAY2BGR) 打印出来后图像是这样1234567891011array([[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], dtype=uint8) 在BGR中（HSV也是），像素是用的三元数组表示，并且每个整形向量分别表示一个B(blue),G(green),R)(red)通道可以采用shape来查看图像的结构，它会返回行和列，如果有一个以上的通道，还会返回通道数，例如针对上述的灰度3x3，返回的是(3,3)，针对编程BGR的3x3,返回的是(3,3,3)图片格式的转换在写入的时候完成即可12img = cv2.imread('aaa.png')cv2.imwrite('MyPic.jpg',img) 另外，imread有好几个参数，例如IMREAD_ANYCOLOR=4,IMREAD_GRAYSCALE=0等这些都是在读入图像的时候采用的格式。例如1grayimg = cv2.imread('mypic.jpg',cv2.IMREAD_GRAYSCALE) 但是无论哪种模式，imread都会删除掉像素点的alpha通道信息，也就是透明度，关于通道的知识这里不详细介绍，自行百度，因为我自己很迷，下次不迷的时候把这里更新下imwrite要求写的目标是BGR或者灰度的形式这一节后面还有关于原始字节和图像的转化以及利用numpy来访问图像数据两小节，但是感觉不是那么需要单独记下来，况且我也想睡觉了，就不写这里了 好吧，之后再写关于视频和摄像头的相关记录或者我直接贴点代码上来好了。。。。洗洗睡]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
        <tag>机器学习</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转载】基于人脸识别的疲劳驾驶检测系统]]></title>
    <url>%2F2018%2F06%2F05%2F%E5%9F%BA%E4%BA%8E%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E7%9A%84%E7%96%B2%E5%8A%B3%E9%A9%BE%E9%A9%B6%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[功能通过识别驾驶员的面部信息来判断驾驶员是否疲劳驾驶 实现思路 通过摄像头得到驾驶员驾驶的实时视频 找出每一帧图片中驾驶员的面部 找出驾驶员面部眼睛的位置 计算出眼睛的长度和宽度，并计算出长宽比例 当长宽比接近与0，即驾驶员闭眼。当驾驶员连续多帧闭眼，即判断疲劳驾驶 图像识别函数功能说明我们在得到图片中的脸部图向后要我们要找到眼睛的坐标位置，这里我们使用dilb为我们提供的函数将脸部转化为68个特征点，如下图所示。其中眼睛由6个点表示，通过计算坐标点的欧几里得距离，我们就可以获得长度和宽度了，最后就可以求出比值 代码实现注1：代码所运行的环境是ubuntu16.04，python版本是3.5 注2：以下是引用的python包，可用pip install安装 12345678910111213from scipy.spatial import distance as distfrom imutils.video import VideoStreamfrom imutils.video import FileVideoStreamfrom imutils import face_utilsfrom threading import Threadimport numpy as npimport playsoundimport argparseimport imutilsimport timeimport dlibimport cv2import os 打开电脑摄像头，并循环读取每一帧图片 12vs = VideoStream(src=0).start()#打开摄像头frame = vs.read()#读出一帧图片，将图片按下述步骤处理得到长宽比，然后不停循环 找出每一帧图片中的人脸 12gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)#灰度化rects = dlib.get_frontal_face_detector(gray, 0)#通过dectetor自带的函数得到图片脸部 将每一张人脸特征点化，并将特征点转换为numpy矩阵，求得眼睛的坐标索引 123predictor = dlib.shape_predictor('test.dat')#这是设置提取脸部特征点的函数，test.dat是官方提供的训练好的模型shape = predictor(gray, rect)#将脸部特征点化shape = face_utils.shape_to_np(shape)#将特征点转化为numpy矩阵 得到特征点中眼部的索引，并从矩阵中提取出来，作为下述计算长宽比函数的参数 1234(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]#获得左眼的索引(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"]#获得右眼的索引leftEye = shape[lStart:lEnd]rightEye = shape[rStart:rEnd] 求出眼睛长宽比。先定义求值函数，再将3中得到的leftEye和rightEye作为参数传入 123456789def eyeAspectRatio(eye):#计算两眼的长度和宽度，并算出长宽比 length_A = dist.euclidean(eye[1], eye[5]) length_B = dist.euclidean(eye[2], eye[4]) length_C = dist.euclidean(eye[0], eye[3]) ratio = (length_A+length_B)/(2.0*length_C) return ratio 比较长宽比，如果长宽比小于阈值，则计数+1，当计数值大于一个数时。则表示疲劳显示出警告 123456if ear &lt; EYE_AR_THRESH: COUNTER += 1else: if COUNTER &gt;= EYE_AR_CONSEC_FRAMES: print("疲劳!!!!!"); COUNTER = 0 参考：https://www.pyimagesearch.com/2017/05/08/drowsiness-detection-opencv/ 转载自：https://www.xsegment.cn/2018/05/31/%E5%9F%BA%E4%BA%8E%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E7%9A%84%E7%96%B2%E5%8A%B3%E9%A9%BE%E9%A9%B6%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
        <tag>机器学习</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[发文测试]]></title>
    <url>%2F2018%2F06%2F03%2F%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%91%E6%96%87%2F</url>
    <content type="text"><![CDATA[请输入密码 Decrypt ]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>发文尝试</tag>
      </tags>
  </entry>
</search>
